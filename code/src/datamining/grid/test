//MpiProxy
//TODO
//0. ArrayHandler in get_parameter offset direkt Ã¼ber MPI Proxy holen (increment auch gleich)
//1. umbenennen (GridLibary in GridLibrary und MpiProxy in DataStorage)
//2. push_new_array entfernen -> hat keine verwendung mehr
//3. rank und target_rank entfernen

//MpiProxy test

MpiProxy* test_MpiProxy = new MpiProxy(3);
int* test_dimensions = new int[3];
test_dimensions[0] = 3;
test_dimensions[1] = 5;
test_dimensions[2] = 2;

double* test_offset = new double[3];
test_offset[0] = 7.3;
test_offset[1] = 9.4;
test_offset[2] = 10;

double test_increment = new double[3];
test_increment[0] = 100;
test_increment[1] = 9;
test_increment[2] = 0.3;

test_MpiProxy -> set_new_array(test_dimenisons, test_offset, test_increment);



//get_dimensions test
int* dimensions = test_MpiProxy -> get_dimensions();
for(int i = 0; i < 3; i++)
{
  CPPUNIT_ASSERT(dimensions[i] == test_dimensions[i]);
}
delete dimensions;

//get_offset test
double* offset = test_MpiProxy -> get_offset();
for(int i = 0; i < 3; i++)
{
  CPPUNIT_ASSERT(offset[i] == test_offset[i]);
}
delete offset;

//get_increment test
double* increment = test_MpiProxy -> get_increment();
for(int i = 0; i < 3; i++)
{
  CPPUNIT_ASSERT(increment[i] == test_increment[i]);
}
delete increment;

//get and set time test
test_MpiProxy -> set_time(0, 10);
test_MpiProxy -> set_time(29, 20);

long time;
time = test_MpiProxy -> get_time(0);
CPPUNIT_ASSERT(10 == time);

time = test_MpiProxy -> get_time(29);
CPPUNIT_ASSERT(20 == time);


//get and set correction_vector
test_MpiProxy -> set_set_correction_vector(0, 3.7);
test_MpiProxy -> set_set_correction_vector(89, 953.27);

double correction_value;
correction_value = test_MpiProxy -> get_correction_vector(0);
CPPUNIT_ASSERT(3.7 == correction_value);
correction_value = test_MpiProxy -> get_correction_vector(89);
CPPUNIT_ASSERT(953.27 == correction_value);

//MpiProxy test finished

//ArrayHandler test
ArrayHandler* test_ArrayHandler = new ArrayHandler(3, test_MpiProxy);

//get_time test
long time;
int* index = new int[3];
index[0] = 0;
index[1] = 0;
index[2] = 0;

time = test_ArrayHandler -> get_time(index);
CPPUNIT_ASSERT(10 == time);

index[0] = 2;
index[1] = 4;
index[2] = 1;
time = test_ArrayHandler -> get_time(index);
CPPUNIT_ASSERT(20 == time);


//get_enviroment_index test
double* parameter = new double[3];
parameter[0] = ;
parameter[1] = ;
parameter[2] = ;//TODO

int* enviroment_index = test_ArrayHandler -> get_enviroment_index();

//test clean
delete test_MpiProxy;
delete test_ArrayHandler
